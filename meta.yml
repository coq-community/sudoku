---
fullname: Sudoku
shortname: sudoku
organization: coq-community
community: true
action: true
nix: true

synopsis: Sudoku solver certified in Coq

description: |-
  A formalisation of Sudoku in Coq. It implements a naive
  Davis-Putnam procedure to solve Sudokus.

publications:
- pub_url: https://hal.inria.fr/hal-03277886
  pub_title: Sudoku in Coq

authors:
- name: Laurent Théry
  initial: true

maintainers:
- name: Ben Siraphob
  nickname: siraben
- name: Laurent Théry
  nickname: thery

opam-file-maintainer: palmskog@gmail.com

opam-file-version: dev

license:
  fullname: GNU Lesser General Public License v2.1 or later
  identifier: LGPL-2.1-or-later

supported_coq_versions:
  text: 8.12 or later
  opam: '{(>= "8.12" & < "8.15~") | (= "dev")}'

tested_coq_opam_versions:
- version: 'dev-ocaml-4.07.1-flambda'

tested_coq_nix_versions:
- coq_version: 'master'
- coq_version: 'v8.14'
- coq_version: '8.13'
- coq_version: '8.12'

namespace: Sudoku

keywords:
- name: puzzles
- name: Davis-Putnam
- name: sudoku

categories:
- name: Miscellaneous/Logical Puzzles and Entertainment

documentation: |-
  ## Documentation

  A Sudoku is represented as a mono-dimensional list of natural
  numbers. Zeros are used to represent empty cells. For example,
  the 3x3 Sudoku:

  ```
    -------------------------------------
    |   |   | 8 | 1 | 6 |   | 9 |   |   |
    -------------------------------------
    |   |   | 4 |   | 5 |   | 2 |   |   |
    -------------------------------------
    | 9 | 7 |   |   |   | 8 |   | 4 | 5 |
    -------------------------------------
    |   |   | 5 |   |   |   |   |   | 6 |
    -------------------------------------
    | 8 | 9 |   |   |   |   |   | 3 | 7 |
    -------------------------------------
    | 1 |   |   |   |   |   | 4 |   |   |
    -------------------------------------
    | 3 | 6 |   | 5 |   |   |   | 8 | 4 |
    -------------------------------------
    |   |   | 2 |   | 7 |   | 5 |   |   |
    -------------------------------------
    |   |   | 7 |   | 4 | 9 | 3 |   |   |
    -------------------------------------
  ```

  is represented as

  ```coq
    0 :: 0 :: 8 :: 1 :: 6 :: 0 :: 9 :: 0 :: 0 ::
    0 :: 0 :: 4 :: 0 :: 5 :: 0 :: 2 :: 0 :: 0 ::
    9 :: 7 :: 0 :: 0 :: 0 :: 8 :: 0 :: 4 :: 5 ::
    0 :: 0 :: 5 :: 0 :: 0 :: 0 :: 0 :: 0 :: 6 ::
    8 :: 9 :: 0 :: 0 :: 0 :: 0 :: 0 :: 3 :: 7 ::
    1 :: 0 :: 0 :: 0 :: 0 :: 0 :: 4 :: 0 :: 0 ::
    3 :: 6 :: 0 :: 5 :: 0 :: 0 :: 0 :: 8 :: 4 ::
    0 :: 0 :: 2 :: 0 :: 7 :: 0 :: 5 :: 0 :: 0 ::
    0 :: 0 :: 7 :: 0 :: 4 :: 9 :: 3 :: 0 :: 0 :: nil
  ```

  All functions are parametrized by the height and width of
  a Sudoku's subrectangles. For example, for a 3x3 Sudoku:
  ```coq
  sudoku 3 3: list nat -> Prop

  check 3 3: forall l, {sudoku 3 3 l} + {~ sudoku 3 3 l}

  find_one 3 3: list nat -> option (list nat)

  find_all 3 3: list nat -> list (list nat)
  ```

  See `Test.v`.

  Corresponding correctness theorems are:
  ```coq
  find_one_correct 3 3
       : forall s,
         length s = 81 ->
         match find_one 3 3 s with
         | Some s1 => refine 3 3 s s1 /\ sudoku 3 3 s1
         | None =>
             forall s, refine 3 3 s s1 -> ~ sudoku 3 3 s1
         end

  find_all_correct 3 3
       : forall s,
         length s = 81 ->
         refine 3 3 s s1 -> (sudoku 3 3 s1 <-> In s1 (find_all 3 3 s))
  ```

  See `Sudoku.v`.

  More about the formalisation can be found in a [note](https://hal.inria.fr/hal-03277886).

  The following files are included:
  - `ListOp.v`         some basic functions on list
  - `Sudoku.v`         main file
  - `Test.v`           test file
  - `Tactic.v`         contradict tactic
  - `Div.v`            division and modulo for nat
  - `Permutation.v`    permutation
  - `UList.v`          unique list
  - `ListAux.v`        auxillary facts on lists
  - `OrderedList.v`    ordered list

  The Sudoku code can be extracted to JavaScript using
  [js_of_ocaml](https://github.com/ocsigen/js_of_ocaml):
  ```shell
  make Sudoku.js
  ```
  Then, point your browser at `Sudoku.html`.
---
